plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = "${project.minecraft_version}+${project.mod_version}"
group = project.maven_group

repositories {
    jcenter()
    maven {
        name = "Ladysnake Libs"
        url = 'https://dl.bintray.com/ladysnake/libs'
    }
    maven {
        name = "Curse Maven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
    maven {
        name = "Guntram"
        url = "https://minecraft.guntram.de/maven/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // API Dependencies
    Set<String> fabricApiModules = [
            "fabric-api-base",
            "fabric-biome-api-v1",
            "fabric-blockrenderlayer-v1",
            "fabric-command-api-v1",
            "fabric-dimensions-v1",
            "fabric-item-api-v1",
            "fabric-item-groups-v0",
            "fabric-networking-blockentity-v0",
            "fabric-networking-api-v1",
            "fabric-object-builder-api-v1",
            "fabric-renderer-registries-v1",
            "fabric-rendering-v1",
            "fabric-tool-attribute-api-v1"
    ]
    fabricApiModules.forEach {
        modImplementation fabricApi.module(it, project.fabric_version)
    }
    modApi("me.sargunvohra.mcmods:autoconfig1u:${project.autoconfig1u_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "io.github.prospector:modmenu:${project.modmenu_version}"
    modImplementation "io.github.cottonmc:LibGui:${project.libgui_version}"
    modImplementation "de.guntram.mcmod:crowdin-translate:${project.crowdin_translate_version}"

    // Jar-in-Jar dependencies
    include "curse.maven:DisableCustomWorldsAdvice-401978:${project.disable_custom_worlds_advice_fileid}"
    include "me.sargunvohra.mcmods:autoconfig1u:${project.autoconfig1u_version}"
    include "me.shedaniel.cloth:config-2:${project.cloth_config_2_version}"
    include "io.github.cottonmc:LibGui:${project.libgui_version}"
    include "de.guntram.mcmod:crowdin-translate:${project.crowdin_translate_version}"

    // Dev runtime dependencies
    modRuntime "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modRuntime "curse.maven:DisableCustomWorldsAdvice-401978:${project.disable_custom_worlds_advice_fileid}"
    modRuntime "io.github.prospector:modmenu:${project.modmenu_version}"
    modRuntime "me.shedaniel.cloth:config-2:${project.cloth_config_2_version}"
    modRuntime "io.github.cottonmc:LibGui:${project.libgui_version}"
    modRuntime "de.guntram.mcmod:crowdin-translate:${project.crowdin_translate_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"

    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}